function redirectWithDelay(url, delay_in_ms) {
    setTimeout(() => {
        window.location.href = url;
    }, delay_in_ms);
}

// Add news content dynamically with categories - Expanded data
function populateNews() {
    const newsContainer = document.querySelector('.news-grid-container');
    if (!newsContainer) return;

    // Clear existing content
    newsContainer.innerHTML = '';

    const newsItems = [
        {
            title: 'Th√¥ng b√°o l·ªãch ngh·ªâ l·ªÖ',
            content: 'Tr∆∞·ªùng s·∫Ω ngh·ªâ l·ªÖ t·ª´ ng√†y 30/4 ƒë·∫øn 3/5. C√°c ho·∫°t ƒë·ªông h·ªçc t·∫≠p s·∫Ω ƒë∆∞·ª£c ti·∫øp t·ª•c v√†o ng√†y 4/5.',
            date: '22/04/2023',
            category: 'academic'
        },
        {
            title: 'H·ªôi th·∫£o khoa h·ªçc',
            content: 'H·ªôi th·∫£o khoa h·ªçc s·∫Ω di·ªÖn ra v√†o ng√†y 15/5/2023 t·∫°i H·ªôi tr∆∞·ªùng A v·ªõi s·ª± tham gia c·ªßa c√°c chuy√™n gia h√†ng ƒë·∫ßu.',
            date: '20/04/2023',
            category: 'event'
        },
        {
            title: 'L·ªãch thi cu·ªëi k·ª≥',
            content: 'L·ªãch thi cu·ªëi k·ª≥ ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t. Vui l√≤ng ki·ªÉm tra email v√† c·ªïng th√¥ng tin sinh vi√™n.',
            date: '18/04/2023',
            category: 'academic'
        },
        {
            title: 'C√¢u l·∫°c b·ªô l·∫≠p tr√¨nh m·ªõi',
            content: 'C√¢u l·∫°c b·ªô l·∫≠p tr√¨nh Python s·∫Ω khai tr∆∞∆°ng v√†o th·ª© 7 tu·∫ßn n√†y. ƒêƒÉng k√Ω tham gia t·∫°i vƒÉn ph√≤ng khoa.',
            date: '15/04/2023',
            category: 'event'
        },
        {
            title: 'H·ªçc b·ªïng du h·ªçc 2023',
            content: 'Th√¥ng tin v·ªÅ c√°c h·ªçc b·ªïng du h·ªçc nƒÉm 2023 ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t. H·∫°n ch√≥t n·ªôp h·ªì s∆° l√† 30/5/2023.',
            date: '12/04/2023',
            category: 'academic'
        },
        // New news items
        {
            title: 'Tuy·ªÉn d·ª•ng sinh vi√™n th·ª±c t·∫≠p',
            content: 'C√¥ng ty ABC ƒëang t√¨m ki·∫øm sinh vi√™n nƒÉm cu·ªëi ng√†nh CNTT cho v·ªã tr√≠ th·ª±c t·∫≠p. ·ª®ng vi√™n quan t√¢m vui l√≤ng g·ª≠i CV tr∆∞·ªõc ng√†y 10/5.',
            date: '10/04/2023',
            category: 'event'
        },
        {
            title: 'Khai tr∆∞∆°ng ph√≤ng nghi√™n c·ª©u m·ªõi',
            content: 'Ph√≤ng nghi√™n c·ª©u AI v√† Robotics ƒë√£ ch√≠nh th·ª©c ƒë∆∞·ª£c khai tr∆∞∆°ng t·∫°i t·∫ßng 5, t√≤a nh√† B. Sinh vi√™n c√≥ th·ªÉ ƒëƒÉng k√Ω s·ª≠ d·ª•ng t·ª´ tu·∫ßn sau.',
            date: '08/04/2023',
            category: 'academic'
        },
        {
            title: 'Cu·ªôc thi kh·ªüi nghi·ªáp sinh vi√™n',
            content: 'Cu·ªôc thi "√ù t∆∞·ªüng kh·ªüi nghi·ªáp s√°ng t·∫°o" s·∫Ω di·ªÖn ra v√†o th√°ng 6/2023. Gi·∫£i th∆∞·ªüng l√™n ƒë·∫øn 50 tri·ªáu ƒë·ªìng cho ƒë·ªôi chi·∫øn th·∫Øng.',
            date: '05/04/2023',
            category: 'event'
        },
        {
            title: 'Th√¥ng b√°o ƒë·ªïi ph√≤ng h·ªçc m√¥n Tri·∫øt h·ªçc',
            content: 'T·ª´ tu·∫ßn sau, m√¥n Tri·∫øt h·ªçc s·∫Ω ƒë∆∞·ª£c chuy·ªÉn t·ª´ ph√≤ng C203 sang ph√≤ng D101 do nhu c·∫ßu s·ª≠a ch·ªØa c∆° s·ªü v·∫≠t ch·∫•t.',
            date: '03/04/2023',
            category: 'academic'
        },
        {
            title: 'Bu·ªïi giao l∆∞u v·ªõi doanh nghi·ªáp',
            content: 'Sinh vi√™n c√≥ c∆° h·ªôi g·∫∑p g·ª° v√† giao l∆∞u v·ªõi ƒë·∫°i di·ªán t·ª´ Google, Microsoft v√† Apple v√†o th·ª© 6 tu·∫ßn t·ªõi t·∫°i H·ªôi tr∆∞·ªùng l·ªõn.',
            date: '01/04/2023',
            category: 'event'
        },
        {
            title: 'Ch∆∞∆°ng tr√¨nh trao ƒë·ªïi sinh vi√™n',
            content: 'Ch∆∞∆°ng tr√¨nh trao ƒë·ªïi sinh vi√™n v·ªõi ƒê·∫°i h·ªçc Tokyo m·ªü ƒë∆°n ƒëƒÉng k√Ω cho k·ª≥ m√πa thu. H·∫°n ch√≥t n·ªôp h·ªì s∆° l√† 30/6/2023.',
            date: '29/03/2023',
            category: 'academic'
        },
        {
            title: 'Workshop k·ªπ nƒÉng m·ªÅm',
            content: 'Workshop v·ªÅ k·ªπ nƒÉng giao ti·∫øp v√† l√†m vi·ªác nh√≥m s·∫Ω ƒë∆∞·ª£c t·ªï ch·ª©c mi·ªÖn ph√≠ cho t·∫•t c·∫£ sinh vi√™n v√†o ng√†y 10/5/2023.',
            date: '25/03/2023',
            category: 'event'
        }
    ];

    // Add news items to container with improved markup
    newsItems.forEach((item) => {
        const newsItem = document.createElement('div');
        newsItem.className = 'news-item';
        newsItem.dataset.category = item.category;

        newsItem.innerHTML = `
            <div class="news-item-header">
                <span class="news-category">${item.category === 'event' ? 'S·ª± ki·ªán' : 'H·ªçc v·ª•'}</span>
                <h3 title="${item.title}">${item.title}</h3>
            </div>
            <div class="news-item-content">
                <p title="${item.content}">${item.content}</p>
            </div>
            <div class="news-date">${item.date}</div>
        `;

        newsContainer.appendChild(newsItem);
    });
}

// Dynamically generate the schedule for each day
function populateSchedule() {
    // Schedule data organized by day
    const scheduleData = {
        monday: [
            {
                time: '07:30 - 10:40',
                subject: 'Nh·∫≠p m√¥n IoT',
                room: 'B302_LAB_CT',
                teacher: 'Nguy·ªÖn Minh S∆°n',
                type: 'iot',
                checked: false
            },
            {
                time: '12:50 - 16:45',
                subject: 'L·∫≠p tr√¨nh h∆∞·ªõng ƒë·ªëi t∆∞·ª£ng {Python}',
                room: 'B501_LAB_AI',
                teacher: 'Phan Th·ªã H∆∞∆°ng',
                type: 'programming',
                checked: false
            }
        ],
        tuesday: [],
        wednesday: [
            {
                time: '07:30 - 10:40',
                subject: 'Tin h·ªçc ƒë·∫°i c∆∞∆°ng {Word, Excel, PowerPoint, Intern}',
                room: 'Online',
                teacher: 'Phan Th·ªã H∆∞∆°ng',
                type: 'informatics',
                checked: false
            },
            {
                time: '12:50 - 16:00',
                subject: 'X√°c su·∫•t th·ªëng k√™ {CNTT t·ª´ kh√≥a 2021}',
                room: 'G301',
                teacher: 'ƒêinh Th√°i S∆°n',
                type: 'statistics',
                checked: false
            }
        ],
        thursday: [
            {
                time: '07:30 - 09:00',
                subject: 'Thi·∫øt k·∫ø UI/UX',
                room: 'C203_PM02',
                teacher: 'B√πi Xu√¢n C·∫£nh',
                type: 'design',
                checked: false
            },
            {
                time: '09:05 - 10:35',
                subject: 'Thi·∫øt k·∫ø UI/UX (Th·ª±c h√†nh)',
                room: 'C203_PM02',
                teacher: 'B√πi Xu√¢n C·∫£nh',
                type: 'design',
                checked: false
            },
            {
                time: '10:40 - 11:25',
                subject: 'Sinh ho·∫°t l·ªõp',
                room: 'C203_PM02',
                teacher: 'B√πi Xu√¢n C·∫£nh',
                type: 'class activity',
                checked: false
            },
            {
                time: '12:50 - 16:00',
                subject: 'Tin h·ªçc ƒë·∫°i c∆∞∆°ng {Word, Excel, PowerPoint, Intern}',
                room: 'C502_PM09',
                teacher: 'Phan Th·ªã H∆∞∆°ng',
                type: 'informatics',
                checked: false
            }
        ],
        friday: [
            {
                time: '12:50 - 14:20',
                subject: 'C∆° s·ªü d·ªØ li·ªáu {kh√≥a 2022}',
                room: 'B501_LAB_AI',
                teacher: 'Phan Thi·ªán Ph∆∞·ªõc',
                type: 'database',
                checked: false
            },
            {
                time: '14:25 - 15:55',
                subject: 'C∆° s·ªü d·ªØ li·ªáu {kh√≥a 2022}',
                room: 'B501_LAB_AI',
                teacher: 'Phan Thi·ªán Ph∆∞·ªõc',
                type: 'database',
                checked: false
            }
        ],
        saturday: [],
        sunday: [
            {
                time: '07:30 - 10:40',
                subject: 'English 2',
                room: 'Online',
                teacher: 'Nguy·ªÖn Ng·ªçc L∆∞u Ly',
                type: 'english',
                checked: false
            }
        ]
    };


    // Get all schedule containers
    const scheduleContainers = {
        monday: document.getElementById('monday'),
        tuesday: document.getElementById('tuesday'),
        wednesday: document.getElementById('wednesday'),
        thursday: document.getElementById('thursday'),
        friday: document.getElementById('friday'),
        saturday: document.getElementById('saturday'),
        sunday: document.getElementById('sunday')
    };

    // Clear existing content in all day containers
    Object.values(scheduleContainers).forEach(container => {
        if (container) container.innerHTML = '';
    });

    // Generate HTML for each day
    Object.entries(scheduleData).forEach(([day, classes], dayIndex) => {
        const container = scheduleContainers[day];
        if (!container) return;

        // If it's Sunday or no classes, show weekend message
        if (classes.length === 0) {
            container.innerHTML = `
                <div class="weekend-message">
                    <div class="weekend-icon">üåû</div>
                    <h3>Kh√¥ng c√≥ l·ªãch h·ªçc</h3>
                    <p>H√£y t·∫≠n h∆∞·ªüng ng√†y ngh·ªâ c·ªßa b·∫°n!</p>

                    <div class="suggestion-box">
                        <h4>G·ª£i √Ω ho·∫°t ƒë·ªông</h4>
                        <ul>
                            <li>√în b√†i v√† l√†m b√†i t·∫≠p</li>
                            <li>Tham gia c√¢u l·∫°c b·ªô sinh vi√™n</li>
                            <li>Th∆∞ gi√£n v√† chu·∫©n b·ªã cho tu·∫ßn m·ªõi</li>
                        </ul>
                    </div>
                </div>
            `;
            return;
        }

        // Generate HTML for each class
        classes.forEach((classItem, classIndex) => {
            const uniqueId = `schedule-checkbox-${dayIndex}-${classIndex}`;
            const classHtml = document.createElement('div');
            classHtml.className = `class-item ${classItem.type}`;
            classHtml.innerHTML = `
                <div class="class-time">${classItem.time}</div>
                <div class="class-details">
                    <h3>${classItem.subject}</h3>
                    <p>Ph√≤ng: ${classItem.room}</p>
                    <p>GV: ${classItem.teacher}</p>
                </div>
                <div class="class-actions">
                    <label class="reminder">
                        <input type="checkbox" ${classItem.checked ? 'checked' : ''} data-id="${uniqueId}">
                        <span class="checkmark"></span>
                    </label>
                </div>
            `;
            container.appendChild(classHtml);
        });
    });
}

// Filter news by category - Updated for scrolling design
function initNewsFilters() {
    const filterBtns = document.querySelectorAll('.news-tab');
    const newsItems = document.querySelectorAll('.news-item');

    // Function to apply filtering with animation
    const applyFilterDisplay = (filter) => {
        newsItems.forEach(item => {
            if (filter === 'all' || item.dataset.category === filter) {
                item.style.display = 'flex';
                // Reset animation to create a nice fade-in effect when filtering
                item.style.animation = 'none';
                // Trigger reflow
                void item.offsetWidth;
                item.style.animation = 'fadeInUp 0.5s ease-out forwards';
            } else {
                item.style.display = 'none';
            }
        });

        // Scroll back to top after filtering
        const newsContainer = document.querySelector('.news-grid-container');
        if (newsContainer) {
            newsContainer.scrollTop = 0;
        }
    };

    // Set initial filter state (T·∫•t c·∫£)
    applyFilterDisplay('all');

    // Add click handlers
    filterBtns.forEach(btn => {
        btn.addEventListener('click', () => {
            // Update active button
            filterBtns.forEach(b => b.classList.remove('active'));
            btn.classList.add('active');

            // Apply filtering
            const filter = btn.dataset.filter;
            applyFilterDisplay(filter);
        });
    });
}

// Handle day switching in schedule
function initScheduleDays() {
    const dayButtons = document.querySelectorAll('.day-btn');
    const daySchedules = document.querySelectorAll('.day-schedule');

    dayButtons.forEach(button => {
        button.addEventListener('click', () => {
            // Remove active class from all buttons and schedules
            dayButtons.forEach(btn => btn.classList.remove('active'));
            daySchedules.forEach(schedule => schedule.classList.remove('active'));

            // Add active class to clicked button
            button.classList.add('active');

            // Show corresponding schedule
            const dayId = button.getAttribute('data-day');
            document.getElementById(dayId).classList.add('active');
        });
    });
}

// Initialize schedule checkboxes to save state
function initScheduleCheckboxes() {
    const checkboxes = document.querySelectorAll('.reminder input[type="checkbox"]');

    checkboxes.forEach(checkbox => {
        const id = checkbox.dataset.id;
        if (!id) return;

        // Set initial state from localStorage if it exists
        const savedState = localStorage.getItem(id);
        if (savedState !== null) {
            checkbox.checked = savedState === 'true';
        }

        // Add event listener to save state
        checkbox.addEventListener('change', function () {
            localStorage.setItem(id, this.checked);
        });
    });
}

// Initialize on page load
document.addEventListener('DOMContentLoaded', function () {
    populateSchedule(); // Populate schedule first
    populateNews();     // Then populate news
    initScheduleDays();
    initScheduleCheckboxes();
    initNewsFilters();
});
